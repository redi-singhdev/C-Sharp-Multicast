Introduction
	This document is for the IMD 3004 class Human Computer interaction and Design. Our group consists of Thomas Kenny and Adam Bielinski. In this report we will cover overview of the goals that we were setting to achieve, the design aspects of our program, what technology we used and mainly what worked and what didn’t work in our final release. 

Objectives
 	Our main objective for the program was to create a Multicast File Transfer System that would easily allow users to share files with multiple people without having the fear of slow transfer rate. Making the interface simple for everyone to use was the other main objective of the project, making it easy to use would make it appeal to the masses. 

Implementation Details

The project uses technology that can be found in Visual Studio. There are essentially two components to the program: The visual front end, and a data back end. The front end was created using Visual Studio, while the back end was coded using Monodevelop. The project was managed using Git, with the repository being stored on GitHub.
The school network does not allow multicast. All computers connected to this network are also firewalled, and do not allow any programs to open a UDP listening port. This makes it impossible to use our program on any lab computer.

	Technology
		
		C# and .NET have some support for multicast, but any protocol built on such a UDP technology must be created by oneself. There are no helper libraries.
		
		Libraries
		
		We did not use any external libraries apart from our own. There were none available.
		
		Our Own
			
			Our own library was created to send files over multicast. This involved coming up with a protocol, an understanding basic UDP networking, and other technologies.
			The basis of our main "Controller" object is a networking object that has a receiving thread. This thread pushes every received chunk on to a stack so that another thread may pop them off (there is no shift operation in C#).
			The Controller object is designed to be run either in the same thread as your GUI thread, being polled on a timer, or be run in a seperate thread. The class is, as of this writing, not thread safe and cannot be run in it's own thread as of yet.
			
			Packet Packager
				
				The library contains a FilePiece class that effectively composes and parses the packets for and from the networking object. Creating this object had to be done very carefully, and an understanding of byte arrays was certainly required. 
				The FilePiece class uses an MD5 sum to verify that packets are uncorrupted.
				Each piece is numbered. The number signifies which section of the file the piece is from. The calculated position is the number times the data length in bytes.
				
Another class handles writing and reading the file in question called FileStreamer. It handles writing and seeking a file. This is likely extremely slow, and not coded entirely to code, but it works.   
				
		.Net
			
			The .NET libraries contain a Sockets class that is used to communicate over the network. Please note that this library throws seemingly random exceptions if a network connection is lost at any point. This may cause mCast to slow down.
			
	Form Elements
there are many different form elements that we used to get the Forms working. 
		

Progress bar - used to show the amount that the file has been sent or riecived.
Buttons - obviously used to set off functions and other navigational changes.
List box - used to list the files availably and possibly the people sending the file.
Tooltip -used to help the user navigate the mCast program.
TableLayoutPannel - used to store the different "windows" that mCast navtigates through.

	Interface Overview
		Interaction (?)
		Networking
		Sending the files
		Receiving the files


What Worked 
The UI
The GUI worked out in many respects, mainly the fact that the whole program is taking place in only a single form. This was for ease of use for the coding; having everything take place in one form meant that there would be little to no variables needed to be passed from one Form to another.
 For the whole program to take place in a single form there were some changes that had to be made. All the windows are actually elements put in a table and when a different “form” needs to be shown it hides the current one and show the one that will be on screen. The form was then resized to just bigger than the table size so that it fits snugly. Tooltips were added to help the user navigate through the Mkast easily.

Connecting over the network
Git 
Source control
Cross platform development

What Didn't Work
-	File recognition
-	Loss of packets
-	File properties transfer

Conclusion
the overall development of mCast was a two faced ordreal. sometimes development went smoothly while when problems did arrive they were difficult to decifer but usually there was a simple fix. There were a few times that ideas had to be rethought through to be solved but these solutions did not take too long to impliment.  
-	Fuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu


